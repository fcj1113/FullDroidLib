package cn.fulldroid.lib.pickphoto.adapter;import android.content.Context;import android.content.Intent;import android.net.Uri;import android.provider.MediaStore;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.FrameLayout;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.Toast;import com.bumptech.glide.Glide;import com.bumptech.glide.load.engine.DiskCacheStrategy;import java.io.File;import java.util.ArrayList;import java.util.List;import cn.fulldroid.lib.R;import cn.fulldroid.lib.pickphoto.PickPhotoActivity;import cn.fulldroid.lib.pickphoto.util.PickConfig;import cn.fulldroid.lib.pickphoto.util.PickUtils;/** * Created by wanbo on 2016/12/31. */public class PickGridAdapter extends RecyclerView.Adapter<RecyclerView.ViewHolder> {    private List<String> imagePaths;    private boolean isShowCamera;    private int spanCount;    private int maxSelectSize;    private List<String> selectPath;    private PickPhotoActivity context;    private View.OnClickListener imgClick;    private int scaleSize;    public PickGridAdapter(Context c, List<String> imagePaths, boolean isShowCamera, int spanCount, int maxSelectSize, View.OnClickListener imgClick) {        this.context = (PickPhotoActivity) c;        this.imagePaths = imagePaths;        this.isShowCamera = isShowCamera;        this.spanCount = spanCount;        this.maxSelectSize = maxSelectSize;        this.imgClick = imgClick;        selectPath = new ArrayList<>();        buildScaleSize();    }    @Override    public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {        if (viewType == PickConfig.CAMERA_TYPE) {            return new CameraViewHolder(LayoutInflater.from(context).inflate(R.layout.pick_item_camera_layout, parent, false));        } else {            return new GridImageViewHolder(LayoutInflater.from(context).inflate(R.layout.pick_item_grid_layout, parent, false));        }    }    @Override    public void onBindViewHolder(RecyclerView.ViewHolder holder, int position) {        if (holder instanceof GridImageViewHolder) {            String path;            if (isShowCamera) {                path = imagePaths.get(position - 1);            } else {                path = imagePaths.get(position);            }            GridImageViewHolder gridImageViewHolder = (GridImageViewHolder) holder;            gridImageViewHolder.bindItem(path);        }    }    @Override    public int getItemViewType(int position) {        if (isShowCamera) {            if (position == 0) {                return PickConfig.CAMERA_TYPE;            } else {                return position;            }        } else {            return position;        }    }    @Override    public int getItemCount() {        if (isShowCamera) {            return imagePaths.size() + 1;        } else {            return imagePaths.size();        }    }    public void updateData(List<String> paths) {        imagePaths = paths;        selectPath.clear();        notifyDataSetChanged();    }    // ViewHolder    private class GridImageViewHolder extends RecyclerView.ViewHolder {        private ImageView gridImage, selectImage;        private FrameLayout selectLayout;        GridImageViewHolder(View itemView) {            super(itemView);            gridImage = (ImageView) itemView.findViewById(R.id.iv_grid);            selectImage = (ImageView) itemView.findViewById(R.id.iv_select);            selectLayout = (FrameLayout) itemView.findViewById(R.id.frame_select_layout);            RelativeLayout.LayoutParams params = (RelativeLayout.LayoutParams) gridImage.getLayoutParams();            params.width = scaleSize;            params.height = scaleSize;        }        void bindItem(String path) {            if (selectPath.contains(path)) {                select();            } else {                unSelect();            }            Glide.with(context).load(Uri.parse("file://" + path)).diskCacheStrategy(DiskCacheStrategy.ALL).thumbnail(0.3f).dontAnimate().into(gridImage);            final String finalPath = path;            selectLayout.setOnClickListener(new View.OnClickListener() {                @Override                public void onClick(View v) {                    boolean isSelect = (boolean) selectImage.getTag(R.id.pick_is_select);                    if (isSelect) {                        if (selectPath.contains(finalPath)) {                            unSelect();                            removePath(finalPath);                        }                    } else {                        if (selectPath.size() < maxSelectSize) {                            if (!selectPath.contains(finalPath)) {                                select();                                addPath(finalPath);                            }                        } else {                            Toast.makeText(context, String.format(context.getString(R.string.pick_photo_size_limit), String.valueOf(maxSelectSize)), Toast.LENGTH_SHORT).show();                        }                    }                }            });            gridImage.setTag(R.id.pick_image_path, path);            gridImage.setOnClickListener(imgClick);        }        void select() {            selectImage.setBackground(null);            selectImage.setBackground(context.getResources().getDrawable(R.drawable.pick_ic_select));            selectImage.setTag(R.id.pick_is_select, true);        }        void unSelect() {            selectImage.setBackground(null);            selectImage.setBackground(context.getResources().getDrawable(R.drawable.pick_ic_un_select));            selectImage.setTag(R.id.pick_is_select, false);        }        void addPath(String path) {            selectPath.add(path);            context.updateSelectText(String.valueOf(selectPath.size()));        }        void removePath(String path) {            selectPath.remove(path);            context.updateSelectText(String.valueOf(selectPath.size()));        }    }    private class CameraViewHolder extends RecyclerView.ViewHolder {        CameraViewHolder(View itemView) {            super(itemView);            ViewGroup.LayoutParams params = itemView.getLayoutParams();            params.width = scaleSize;            params.height = scaleSize;            itemView.setOnClickListener(cameraClick);        }        View.OnClickListener cameraClick = new View.OnClickListener() {            @Override            public void onClick(View v) {                try {                    File photoFile = PickUtils.getInstance(context).getPhotoFile();                    if(photoFile.exists()){                        photoFile.delete();                    }                    if (photoFile.createNewFile()) {                        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);                        intent.putExtra(MediaStore.EXTRA_OUTPUT, PickUtils.getInstance(context).getUri(photoFile));                        context.startActivityForResult(intent, PickConfig.CAMERA_PHOTO_DATA);                    }                } catch (Exception e) {                    Toast.makeText(context,"需要您提供使用相机的权限",Toast.LENGTH_SHORT).show();                    e.printStackTrace();                }            }        };    }    private void buildScaleSize() {        int screenWidth = PickUtils.getInstance(context).getWidthPixels();        int space = PickUtils.getInstance(context).dp2px(PickConfig.ITEM_SPACE);        scaleSize = (screenWidth - (spanCount + 1) * space) / spanCount;    }    public List<String> getSelectPath() {        return selectPath;    }}